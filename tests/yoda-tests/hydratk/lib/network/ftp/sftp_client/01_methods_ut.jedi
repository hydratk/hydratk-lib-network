Test-Scenario-1:
  Id: ts_01
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_init
  Desc: Test method __init__
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.ftp.client import FTPClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize FTPClient
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_verbose
      Desc: Not verbose mode
      
      Test: |
        c = FTPClient('SFTP', False)
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'FTPClient'), '__init__ = FTPClient'
        res = c._verbose
        this.test_result = str(res)
        assert (not res), '_verbose = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_verbose
      Desc: Verbose mode
      
      Test: |
        c = FTPClient('SFTP', True)
        res = c._verbose          

      Validate: |
        this.test_result = res
        assert (res), '_verbose = True'   
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.ftp.client import FTPClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_client
      Desc: Getter client
      
      Test: |
        c = FTPClient('SFTP', True)
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.client.__class__.__name__
      
      Validate: |             
        this.test_result = res
        exp = c._client.__class__.__name__
        assert (res == exp), 'client = {0}'.format(exp)     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_host
      Desc: Getter host
      
      Test: |
        res = c.host
      
      Validate: |             
        this.test_result = res
        exp = c._host
        assert (res == exp), 'host = {0}'.format(exp)
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_port
      Desc: Getter port
      
      Test: |
        res = c.port
      
      Validate: |             
        this.test_result = res
        exp = c._port
        assert (res == exp), 'port = {0}'.format(exp)
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_user
      Desc: Getter user
      
      Test: |
        res = c.user
      
      Validate: |             
        this.test_result = res
        exp = c._user
        assert (res == exp), 'user = {0}'.format(exp)
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_passw
      Desc: Getter passw
      
      Test: |
        res = c.passw
      
      Validate: |             
        this.test_result = res
        exp = c._passw
        assert (res == exp), 'passw = {0}'.format(exp) 
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_cert
      Desc: Getter cert
      
      Test: |
        res = c.cert
      
      Validate: |             
        this.test_result = res
        exp = c._cert
        assert (res == exp), 'cert = {0}'.format(exp)         
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_path
      Desc: Getter path
      
      Test: |
        res = c.path
      
      Validate: |             
        this.test_result = res
        exp = c._path
        assert (res == exp), 'path = {0}'.format(exp)         
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_verbose
      Desc: Getter verbose
      
      Test: |
        res = c.verbose
      
      Validate: |             
        this.test_result = res
        exp = c._verbose
        assert (res == exp), 'verbose = {0}'.format(exp)
        
    Test-Condition-9: 
      Id: tco_09
      Name: tco_is_connected
      Desc: Getter is_connected
      
      Test: |
        res = c.is_connected
      
      Validate: |             
        this.test_result = res
        exp = c._is_connected
        assert (res == exp), 'is_connected = {0}'.format(exp)        
        c.disconnect()    
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_connect
  Desc: Test method connect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.ftp.client import FTPClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
  
  Test-Case-1:
    Id: tc_01
    Name: tc_connect
    Desc: Connect to server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_connect
      Desc: Connect to server 
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['ftp_before_connect', 'ftp_after_connect']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = FTPClient('SFTP')
        host, port, user, passw = '127.0.0.1', 22, 'lynus', 'bowman' 
        res = c.connect(host, port, user, passw)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'connect = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'connect fires {0}'.format(evs)
        res = [c.host, c.port, c.user, c.passw, c.path, c.is_connected]
        this.test_result = str(res)
        exp = [host, port, user, passw, '/', True]
        assert (res == exp), 'host, port, user, passw, path, is_connected = {0}'.format(exp)
        c.disconnect()   
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]          
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_path
      Desc: Set server path 
      
      Test: |
        res = c.connect(host, port, user, passw, path='private')       
      
      Validate: |          
        this.test_result = res
        assert (res), 'connect = True'
        res = [c.host, c.port, c.user, c.passw, c.path, c.is_connected]
        this.test_result = str(res)
        exp = [host, port, user, passw, '/home/lynus/private', True]
        assert (res == exp), 'host, port, user, passw, path, is_connected = {0}'.format(exp)
        c.disconnect()   
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_path
      Desc: Invalid server path 
      
      Test: |
        c._path = None
        res = c.connect(host, port, user, passw, path='/xxx')       
      
      Validate: |          
        this.test_result = res
        assert (res), 'connect = True'
        res = [c.host, c.port, c.user, c.passw, c.path, c.is_connected]
        this.test_result = str(res)
        exp = [host, port, user, passw, None, True]
        assert (res == exp), 'host, port, user, passw, path, is_connected = {0}'.format(exp)
        c.disconnect() 
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_cert
      Desc: Certificate 
      
      Test: |
        c = FTPClient('SFTP')
        host, port, user, cert = 'tldwiki.teledin.cz', 22, 'spravce', '/home/lynus/hydratk/key.pri' 
        res = c.connect(host, port, user, cert=cert)      
      
      Validate: |          
        this.test_result = res
        assert (res), 'connect = True'
        c.disconnect()                             
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_host
      Desc: Invalid host
      
      Test: |
        c = FTPClient('SFTP')
        res = c.connect('1.1.1.1')
      
      Validate: |                                                                               
        this.test_result = res
        assert (not res), 'connect = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_port
      Desc: Invalid port
      
      Test: |
        res = c.connect('127.0.0.1', 2000)
      
      Validate: |                                                                               
        this.test_result = res
        assert (not res), 'connect = False'   
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_user
      Desc: Invalid user
      
      Test: |
        res = c.connect('127.0.0.1', 22, 'xxx', 'xxx')
      
      Validate: |                                                                               
        this.test_result = res
        assert (not res), 'connect = False'                 
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_disconnect
  Desc: Test method disconnect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.ftp.client import FTPClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_disconnect
    Desc: Disconnect from server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_disconnect
      Desc: Disconnect
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.disconnect()
      
      Validate: |                   
        this.test_result = res
        assert (res), 'disconnect = True' 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        c = FTPClient('SFTP')
        res = c.disconnect()
      
      Validate: |           
        this.test_result = res
        assert (not res), 'disconnect = False'     
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_list_dir
  Desc: Test method list_dir
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.ftp.client import FTPClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_list_dir
    Desc: List directory
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_list
      Desc: List
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.list_dir()
      
      Validate: |                  
        this.test_result = str(res)
        assert (len(res) > 0), 'list_dir is not empty' 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        c = FTPClient('SFTP')
        res = c.list_dir()
      
      Validate: |           
        this.test_result = res
        assert (not res), 'list_dir = None'       
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_change_dir
  Desc: Test method change_dir
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.ftp.client import FTPClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
  
  Test-Case-1:
    Id: tc_01
    Name: tc_change_dir
    Desc: Change directory
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_change
      Desc: Change
      
      Test: |
        mh = MasterHead.get_head()
        evs = 'ftp_before_change_dir'
        reg_ev_hook(mh, evs)
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        path = '/home/lynus/private'
        res = c.change_dir(path)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'change_dir = True'
        this.test_result = res = events[0]._id
        assert (res == evs), 'change_dir fires {0}'.format(evs)
        res = [c.host, c.port, c.user, c.passw, c.path, c.is_connected]
        this.test_result = res = c._path
        assert (res == path), '_path = {0}'.format(path)
        c.disconnect()   
        del mh._event_hooks[evs]
        del events[0]
        del events[0] 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        path = '/private'
        res = c.change_dir(path)
      
      Validate: |                  
        this.test_result = res
        assert (not res), 'change_dir = False'
        c.disconnect()   
    
    Test-Condition-2: 
      Id: tco_02
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        c = FTPClient('SFTP')
        res = c.list_dir()
      
      Validate: |           
        this.test_result = res
        assert (not res), 'list_dir = None' 
        
Test-Scenario-7:
  Id: ts_07
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_download_file
  Desc: Test method download_file
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.ftp.client import FTPClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
    from os import path, remove
    from sys import prefix
  
  Test-Case-1:
    Id: tc_01
    Name: tc_download_file
    Desc: Download file
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_download
      Desc: Download
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['ftp_before_download_file', 'ftp_after_download_file']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        
        rpath = prefix+'/var/local/hydratk/yoda/'
        file = 'test.txt'
        with open(rpath+file, 'w') as f:
            f.write('test')
        
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.download_file(rpath+file)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'download_file = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'download_file fires {0}'.format(evs)
        this.test_result = res = (path.exists('./'+file))
        assert (res), 'file {0} downloaded'.format(file)
        remove(file) 
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_local_path
      Desc: Set local path
      
      Test: |
        res = c.download_file(rpath+file, './')       
      
      Validate: |        
        this.test_result = res
        assert (res), 'download_file = True'          
        this.test_result = res = (path.exists('./'+file))
        assert (res), 'file {0} downloaded'.format(file)
        c.disconnect()
        remove(file)         
        remove(rpath+file)  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_rpath
      Desc: Invalid remote path
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.download_file('/private/test.txt')
      
      Validate: |                               
        this.test_result = res
        assert (not res), 'download_file = False' 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_lpath
      Desc: Invalid local path
      
      Test: |
        rpath = prefix+'/var/local/hydratk/yoda/'
        file = 'test.txt'
        with open(rpath+file, 'w') as f:
            f.write('test')  
            
        res = c.download_file(rpath+file, '/private')    
      
      Validate: |
        this.test_result = res
        assert (not res), 'download_file = False' 
        c.disconnect()
        remove(rpath+file) 
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        res = c.download_file(rpath+file)
      
      Validate: |                        
        this.test_result = res
        assert (not res), 'download_file = False'
        
Test-Scenario-8:
  Id: ts_08
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_upload_file
  Desc: Test method upload_file
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.ftp.client import FTPClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
    from os import path, remove
    from sys import prefix
  
  Test-Case-1:
    Id: tc_01
    Name: tc_upload_file
    Desc: Upload file
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_upload
      Desc: Upload
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['ftp_before_upload_file', 'ftp_after_upload_file']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        
        lpath = prefix+'/var/local/hydratk/yoda/'
        file = 'test.txt'
        with open(lpath+file, 'w') as f:
            f.write('test')
        
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman', path='/home/lynus')
        res = c.upload_file(lpath+file)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'upload_file = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'upload_file fires {0}'.format(evs)
        this.test_result = res = (path.exists('/home/lynus/'+file))
        assert (res), 'file {0} uploaded'.format(file)
        remove('/home/lynus/'+file) 
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_remote_path
      Desc: Set remote path
      
      Test: |
        res = c.upload_file(lpath+file, './')       
      
      Validate: |        
        this.test_result = res
        assert (res), 'upload_file = True'          
        this.test_result = res = (path.exists('/home/lynus/'+file))
        assert (res), 'file {0} uploaded'.format(file)
        c.disconnect()
        remove('/home/lynus/'+file)         
        remove(lpath+file)  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_lpath
      Desc: Invalid local path
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.upload_file('/private/test.txt')
      
      Validate: |                               
        this.test_result = res
        assert (not res), 'upload_file = False' 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_rpath
      Desc: Invalid remote path
      
      Test: |
        lpath = prefix+'/var/local/hydratk/yoda/'
        file = 'test.txt'
        with open(lpath+file, 'w') as f:
            f.write('test')  
            
        res = c.upload_file(lpath+file, '/private')    
      
      Validate: |
        this.test_result = res
        assert (not res), 'upload_file = False' 
        c.disconnect()
        remove(lpath+file) 
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        res = c.upload_file(lpath+file)
      
      Validate: |                        
        this.test_result = res
        assert (not res), 'upload_file = False'   
        
Test-Scenario-9:
  Id: ts_09
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_delete_file
  Desc: Test method delete_file
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.ftp.client import FTPClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
    from os import path
    from sys import prefix
  
  Test-Case-1:
    Id: tc_01
    Name: tc_delete_file
    Desc: Upload file
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_delete
      Desc: Delete
      
      Test: |
        mh = MasterHead.get_head()
        evs = 'ftp_before_delete_file'
        reg_ev_hook(mh, evs)
        
        rpath = prefix+'/var/local/hydratk/yoda/test.txt'
        with open(rpath, 'w') as f:
            f.write('test')
        
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.delete_file(rpath)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'upload_file = True'
        this.test_result = res = events[0]._id
        assert (res == evs), 'delete_file fires {0}'.format(evs)
        this.test_result = res = (path.exists(rpath))
        assert (not res), 'file {0} deleted'.format(rpath)        
        del mh._event_hooks[evs]
        del events[0]             
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_file
      Desc: Invalid file
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.delete_file('/private/test.txt')
      
      Validate: |                               
        this.test_result = res
        assert (not res), 'delete_file = False' 
        c.disconnect()
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        res = c.delete_file('/private/test.txt')
      
      Validate: |                        
        this.test_result = res
        assert (not res), 'delete_file = False'      
        
Test-Scenario-10:
  Id: ts_10
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_make_dir
  Desc: Test method make_dir
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.ftp.client import FTPClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
    from os import path, system
  
  Test-Case-1:
    Id: tc_01
    Name: tc_make_dir
    Desc: Make directory
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_make
      Desc: Make
      
      Test: |
        mh = MasterHead.get_head()
        evs = 'ftp_before_make_dir'
        reg_ev_hook(mh, evs)
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        rpath = '/var/local/hydratk/test'
        res = c.make_dir(rpath)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'make_dir = True'
        this.test_result = res = events[0]._id
        assert (res == evs), 'make_dir fires {0}'.format(evs)
        this.test_result = res = (path.exists(rpath))
        assert (res), 'dir {0} created'.format(rpath)  
        c.disconnect()  
        system('rmdir {0}'.format(rpath))  
        del mh._event_hooks[evs]
        del events[0]               
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.make_dir('/dev/null/test')
      
      Validate: |                               
        this.test_result = res
        assert (not res), 'make_dir = False' 
        c.disconnect()
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        res = c.make_dir('/test')
      
      Validate: |                        
        this.test_result = res
        assert (not res), 'make_dir = False'           
        
Test-Scenario-11:
  Id: ts_11
  Path: hydratk/lib/network/ftp/sftp_client/01_methods_ut.jedi
  Name: ts_remove_dir
  Desc: Test method remove_dir
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.ftp.client import FTPClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
    from os import path, system
    from sys import prefix
  
  Test-Case-1:
    Id: tc_01
    Name: tc_remove_dir
    Desc: Remove directory
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_remove
      Desc: Remove
      
      Test: |
        mh = MasterHead.get_head()
        evs = 'ftp_before_remove_dir'
        reg_ev_hook(mh, evs)            
        rpath = prefix+'/var/local/hydratk/test'   
        system('mkdir {0}'.format(rpath))
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')        
        res = c.remove_dir(rpath)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'make_dir = True'
        this.test_result = res = events[0]._id
        assert (res == evs), 'make_dir fires {0}'.format(evs)
        this.test_result = res = (path.exists(rpath))
        assert (not res), 'dir {0} removed'.format(rpath)  
        c.disconnect()   
        del mh._event_hooks[evs]
        del events[0]               
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        c = FTPClient('SFTP')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.remove_dir('/dev/null/test')
      
      Validate: |                               
        this.test_result = res
        assert (not res), 'remove_dir = False' 
        c.disconnect()
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        res = c.remove_dir('/test')
      
      Validate: |                        
        this.test_result = res
        assert (not res), 'remove_dir = False'                         