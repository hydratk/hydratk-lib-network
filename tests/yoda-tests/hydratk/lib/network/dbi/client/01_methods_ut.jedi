Test-Scenario-1:
  Id: ts_01
  Path: hydratk/lib/network/dbi/client/01_methods_ut.jedi
  Name: ts_dbclient
  Desc: Test method DBClient
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.dbi.client import DBClient
    from platform import python_implementation
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize DBClient
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_sqlite
      Desc: SQLITE engine
    
      Test: |
        c = DBClient('SQLITE')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'DBClient'), 'DBClient = DBClient'           
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_oracle
      Desc: ORACLE engine
    
      Test: |
        c = DBClient('ORACLE')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'DBClient'), 'DBClient = DBClient'    
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_mysql
      Desc: MYSQL engine
    
      Test: |
        c = DBClient('MYSQL')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'DBClient'), 'DBClient = DBClient'    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_postgresql
      Desc: POSTGRESQL engine
    
      Test: |
        c = DBClient('POSTGRESQL')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'DBClient'), 'DBClient = DBClient'        
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_jdbc
      Desc: JDBC engine
    
      Test: |
        if (python_implementation() != 'PyPy'):
            c = DBClient('JDBC', False, '/usr/local/app/java/jdk1.8.0_51/jre/lib/amd64/server/libjvm.so')
            res = c.__class__.__name__
        else:
            try:
                DBClient('JDBC')
                ex = False
            except NotImplementedError:
                ex = True
      
      Validate: |
        if (python_implementation() != 'PyPy'):
            this.test_result = res
            assert (res == 'DBClient'), 'DBClient = DBClient'
        else:
            assert (ex), 'raises NotImplementedError' 
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_mssql
      Desc: MSSQL engine
    
      Test: |
        if (python_implementation() != 'PyPy'):
            c = DBClient('MSSQL')
            res = c.__class__.__name__
        else:
            try:
                DBClient('MSSQL')
                ex = False
            except NotImplementedError:
                ex = True            
      
      Validate: |
        if (python_implementation() != 'PyPy'):
            this.test_result = res
            assert (res == 'DBClient'), 'DBClient = DBClient' 
        else:
            assert (ex), 'raises NotImplementedError'                              
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_redis
      Desc: Redis engine
    
      Test: |
        c = DBClient('REDIS')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'DBClient'), 'DBClient = DBClient'   
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_mongodb
      Desc: MongoDB engine
    
      Test: |
        c = DBClient('MONGODB')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'DBClient'), 'DBClient = DBClient'      
        
    Test-Condition-9: 
      Id: tco_09
      Name: tco_cassandra
      Desc: Cassandra engine
    
      Test: |
        c = DBClient('CASSANDRA')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'DBClient'), 'DBClient = DBClient'                                               
        
    Test-Condition-10: 
      Id: tco_10
      Name: tco_invalid
      Desc: Invalid engine
      
      Test: |
        try:
            c = DBClient('')
            ex = False
        except NotImplementedError:
            ex = True
      
      Validate: |          
        this.test_result = ex
        assert (ex), 'DBClient raises NotImplementedError'