Test-Scenario-1:
  Id: ts_01
  Path: hydratk/lib/network/term/ssh_client/01_methods_ut.jedi
  Name: ts_init
  Desc: Test method __init__
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.term.client import TermClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize TermClient
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_verbose
      Desc: Not verbose mode
      
      Test: |
        c = TermClient('SSH', False)
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'TermClient'), '__init__ = TermClient'
        this.test_result = res = c._client.__class__.__name__
        assert (res == 'SSHClient'), '_client = SSHClient'
        this.test_result = res = c._verbose
        assert (not res), '_verbose = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_verbose
      Desc: Verbose mode
      
      Test: |
        c = TermClient('SSH', True)
        res = c._verbose
      
      Validate: |
        this.test_result = res
        assert (res), '_verbose = True'        
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/lib/network/term/ssh_client/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.term.client import TermClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_client
      Desc: Getter client
      
      Test: |
        c = TermClient('SSH', True)
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.client.__class__.__name__
      
      Validate: |        
        this.test_result = res
        exp = c._client.__class__.__name__
        assert (res == exp), 'client = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_host
      Desc: Getter host
      
      Test: |
        res = c.host
      
      Validate: |        
        this.test_result = res
        exp = c._host
        assert (res == exp), 'host = {0}'.format(exp)     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_port
      Desc: Getter port
      
      Test: |
        res = c.port
      
      Validate: |        
        this.test_result = res
        exp = c._port
        assert (res == exp), 'port = {0}'.format(exp)           
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_user
      Desc: Getter user
      
      Test: |
        res = c.user
      
      Validate: |        
        this.test_result = res
        exp = c._user
        assert (res == exp), 'user = {0}'.format(exp)    
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_passw
      Desc: Getter passw
      
      Test: |
        res = c.passw
      
      Validate: |        
        this.test_result = res
        exp = c._passw
        assert (res == exp), 'passw = {0}'.format(exp) 
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_cert
      Desc: Getter cert
      
      Test: |
        res = c.cert
      
      Validate: |        
        this.test_result = res
        exp = c._cert
        assert (res == exp), 'cert = {0}'.format(exp)            
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_verbose
      Desc: Getter verbose
      
      Test: |
        res = c.verbose
      
      Validate: |        
        this.test_result = res
        exp = c._verbose
        assert (res == exp), 'verbose = {0}'.format(exp)   
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_is_connected
      Desc: Getter is_connected
      
      Test: |
        res = c.is_connected
      
      Validate: |        
        this.test_result = res
        exp = c._is_connected
        assert (res == exp), 'is_connected = {0}'.format(exp) 
        c.disconnect()      
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/lib/network/term/ssh_client/01_methods_ut.jedi
  Name: ts_connect
  Desc: Test method connect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.term.client import TermClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
  
  Test-Case-1:
    Id: tc_01
    Name: tc_connect
    Desc: Connect to server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_connect
      Desc: Connect to server
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['term_before_connect', 'term_after_connect']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = TermClient('SSH')
        host, port, user, passw = '127.0.0.1', 22, 'lynus', 'bowman' 
        res = c.connect(host, port, user, passw)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'connect = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'connect fires {0}'.format(evs)
        res = [c.host, c.port, c.user, c.passw, c.is_connected]
        this.test_result = str(res)
        exp = [host, port, user, passw, True]
        assert (res == exp), 'host, port, user, passw, is_connected = {0}'.format(exp)
        c.disconnect() 
        del mh._event_hooks[evs[0]] 
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_cert
      Desc: Certificate
      
      Test: |
        c = TermClient('SSH')
        host, port, user, cert = 'tldwiki.teledin.cz', 22, 'spravce', '/home/lynus/hydratk/key.pri' 
        res = c.connect(host, port, user, cert=cert)
        
      Validate: |          
        this.test_result = res
        assert (res), 'connect = True'                   
        c.disconnect()
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_host
      Desc: Invalid host
      
      Test: |
        c = TermClient('SSH')
        res = c.connect('1.1.1.1')
      
      Validate: |
        this.test_result = res
        assert (not res), 'connect = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_port
      Desc: Invalid port
      
      Test: |
        res = c.connect('127.0.0.1', 20)
      
      Validate: |
        this.test_result = res
        assert (not res), 'connect = False'      
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_user
      Desc: Invalid user
      
      Test: |
        res = c.connect('127.0.0.1', 22, 'lynus', 'xxx')
      
      Validate: |
        this.test_result = res
        assert (not res), 'connect = False' 
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/lib/network/term/ssh_client/01_methods_ut.jedi
  Name: ts_disconnect
  Desc: Test method disconnect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.term.client import TermClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_disconnect
    Desc: Disconnect from server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_disconnect
      Desc: Disconnect from server
      
      Test: |
        c = TermClient('SSH')
        c.connect('127.0.0.1', 22, 'lynus', 'bowman')
        res = c.disconnect()
      
      Validate: |           
        this.test_result = res
        assert (res), 'disconnect = True' 
        this.test_result = res = c.is_connected
        assert (not res), 'is_connected = False'  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        c = TermClient('SSH')
        res = c.disconnect()
      
      Validate: |
        this.test_result = res
        assert (not res), 'disconnect = False'
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/lib/network/term/ssh_client/01_methods_ut.jedi
  Name: ts_exec_command
  Desc: Test method exec_command
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.term.client import TermClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
    from os import path
  
  Test-Case-1:
    Id: tc_01
    Name: tc_exec_command
    Desc: Execute command
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_stdout
      Desc: Command with stdout
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['term_before_exec_command', 'term_after_exec_command']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = TermClient('SSH')
        host, port, user, passw = '127.0.0.1', 22, 'lynus', 'bowman' 
        res = c.connect(host, port, user, passw)  
        res, out = c.exec_command('pwd')     
      
      Validate: |          
        this.test_result = res
        assert (res), 'exec_command = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'exec_command fires {0}'.format(evs)
        this.test_result = res = out[0]
        assert (res != None), 'out is not empty' 
        del mh._event_hooks[evs[0]] 
        del mh._event_hooks[evs[1]]         
        del events[0] 
        del events[0] 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_stdin
      Desc: Command with stdin
      
      Test: |
        file = '/home/lynus/test.txt'
        with open(file, 'w') as f:
            f.write('test')
      
        c.connect(host, port, user, passw)
        res, out = c.exec_command('rm {0}'.format(file), 'y')
      Validate: |   
        this.result = res
        assert (res), 'exec_command = True'
        this.test_result = out
        assert (out == None), 'out is empty'
        this.test_result = res = (path.exists(file))
        assert (not res), 'file removed'                 
        c.disconnect()
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        c = TermClient('SSH')
        res, out = c.exec_command('pwd')
      
      Validate: |
        this.test_result = res
        assert (not res), 'exec_command = False'  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_command
      Desc: Invalid command
      
      Test: |
        res = c.connect('127.0.0.1', 22, 'lynus', 'bowman')  
        res, out = c.exec_command('xxx')     
      
      Validate: |          
        this.test_result = res
        assert (not res), 'exec_command = False'
        this.test_result = res = out[0]
        assert (res != None), 'out is not empty'        
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_no_rights
      Desc: No access rights
      
      Test: |  
        res, out = c.exec_command('touch /etc/hydratk/test.txt')     
      
      Validate: |          
        this.test_result = res
        assert (not res), 'exec_command = False'
        this.test_result = res = out[0]
        assert (res != None), 'out is not empty'    
        c.disconnect()               