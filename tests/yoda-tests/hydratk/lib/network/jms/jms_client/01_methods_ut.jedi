Test-Scenario-1:
  Id: ts_01
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_init
  Desc: Test method __init__
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.jms.client import JMSClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize JMSClient
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_init
      Desc: Initialize
      
      Test: |
        jvm_path = '/usr/local/app/java/jdk1.8.0_51/jre/lib/amd64/server/libjvm.so'
        c = JMSClient('JMS', True, jvm_path)
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'JMSClient'), '__init__ = JMSClient'     
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_bridge
      Desc: Getter bridge
      
      Test: |
        res = c.bridge.__class__.__name__
      
      Validate: |        
        this.test_result = res
        exp = c._bridge.__class__.__name__
        assert (res == exp), 'bridge = {0}'.format(exp)       
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_client
      Desc: Getter client
      
      Test: |
        res = c.client.__class__.__name__
      
      Validate: |        
        this.test_result = res
        exp = c._client.__class__.__name__
        assert (res == exp), 'client = {0}'.format(exp)
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_verbose
      Desc: Getter verbose
      
      Test: |
        res = c.verbose
      
      Validate: |        
        this.test_result = res
        exp = c._verbose
        assert (res == exp), 'verbose = {0}'.format(exp)        
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_connection_factory
      Desc: Getter connection_factory
      
      Test: |
        res = c.connection_factory
      
      Validate: |        
        this.test_result = res
        exp = c._connection_factory
        assert (res == exp), 'connection_factory = {0}'.format(exp)        
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_properties
      Desc: Getter properties
      
      Test: |
        res = c.properties
      
      Validate: |        
        this.test_result = str(res)
        exp = c._properties
        assert (res == exp), 'properties = {0}'.format(exp)        
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_is_connected
      Desc: Getter is_connected
      
      Test: |
        res = c.is_connected
      
      Validate: |        
        this.test_result = res
        exp = c._is_connected
        assert (res == exp), 'is_connected = {0}'.format(exp) 
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_connect
  Desc: Test method connect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
  
  Test-Case-1:
    Id: tc_01
    Name: tc_connect
    Desc: Connect to server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_connect
      Desc: Connect to server
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['jms_before_connect', 'jms_after_connect']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        connection_factory = 'ConnectionFactory'
        properties = {'provider_url': 'tcp://127.0.0.1:61616',
                      'initial_context_factory': 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'}
        res = c.connect(connection_factory, properties)       
      
      Validate: |          
        this.test_result = res
        assert (res), 'connect = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'connect fires {0}'.format(evs)
        res = [c.connection_factory, c.properties, c.is_connected]
        this.test_result = str(res)
        exp = [connection_factory, properties, True]
        assert (res == exp), 'connection_factory, properties, is_connected = {0}'.format(exp)
        c.disconnect() 
        del mh._event_hooks[evs[0]] 
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        c.disconnect()
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_factory
      Desc: Invalid connection factory
      
      Test: |      
        connection_factory = 'xx'
        properties = {'provider_url': 'tcp://127.0.0.1:61616',
                      'initial_context_factory': 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'}
        res = c.connect(connection_factory, properties) 
      
      Validate: |               
        this.test_result = res
        assert (not res), 'connect = False'  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_context
      Desc: Invalid initial context factory
      
      Test: |      
        connection_factory = 'ConnectionFactory'
        properties['initial_context_factory'] = 'xx'
        res = c.connect(connection_factory, properties) 
      
      Validate: |               
        this.test_result = res
        assert (not res), 'connect = False'            
    
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_host
      Desc: Invalid host
      
      Test: |      
        properties = {'provider_url': 'tcp://1.1.1.1:61616',
                      'initial_context_factory': 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'}
        res = c.connect(connection_factory, properties) 
      
      Validate: |               
        this.test_result = res
        assert (not res), 'connect = False'      
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_port
      Desc: Invalid port
      
      Test: |
        properties['provider_url'] = 'tcp://127.0.0.1:20'
        res = c.connect(connection_factory, properties) 
      
      Validate: |               
        this.test_result = res
        assert (not res), 'connect = False'         
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_disconnect
  Desc: Test method disconnect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Test-Case-1:
    Id: tc_01
    Name: tc_disconnect
    Desc: Disconnect from server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_disconnect
      Desc: Disconnect
      
      Test: |
        connection_factory = 'ConnectionFactory'
        properties = {'provider_url': 'tcp://127.0.0.1:61616',
                      'initial_context_factory': 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'}
        c.connect(connection_factory, properties)
        res = c.disconnect()
      
      Validate: |     
        this.test_result = res
        assert (res), 'disconnect = True'     
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
    
      Test: |
        res = c.disconnect()
    
      Validate: |           
        this.test_result = res
        assert (not res), 'disconnect = False'          
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_send
  Desc: Test method send
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
  
  Test-Case-1:
    Id: tc_01
    Name: tc_send
    Desc: Send message
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_queue
      Desc: Send message to queue
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['jms_before_send', 'jms_after_send']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])      
        connection_factory = 'ConnectionFactory'
        properties = {'provider_url': 'tcp://127.0.0.1:61616',
                      'initial_context_factory': 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'}
        res = c.connect(connection_factory, properties) 
        queue = 'dynamicQueues/HydraQueue'
        msg = 'test'
        res = c.send(queue, msg, 'queue')       
                
      Validate: |
        this.test_result = res
        assert (res), 'send = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'send fires {0}'.format(evs)
        del mh._event_hooks[evs[0]] 
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_queue_headers
      Desc: Send message with headers to queue
      
      Test: |
        headers = {'JMSCorrelationID': '1234', 'JMSType': 'test_msg'}
        res = c.send(queue, msg, 'queue', headers)       
                
      Validate: |
        this.test_result = res
        assert (res), 'send = True'
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_topic
      Desc: Send message to topic
      
      Test: |
        topic = 'dynamicTopics/HydraTopic'
        res = c.send(topic, msg, 'topic')       
                
      Validate: |
        this.test_result = res
        assert (res), 'send = True'        
                         
    Test-Condition-4: 
      Id: tco_04
      Name: tco_topic_headers
      Desc: Send message with headers to topic
      
      Test: |
        res = c.send(topic, msg, 'topic', headers)       
                
      Validate: |
        this.test_result = res
        assert (res), 'send = True' 
        c.disconnect() 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases      
        
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server 
      
      Test: |
        res = c.send('', '')             
        
      Validate: |
        this.test_result = res
        assert (not res), 'send = False'                         
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_browse
  Desc: Test method browse
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
  
  Test-Case-1:
    Id: tc_01
    Name: tc_browse
    Desc: Browse queue
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_queue
      Desc: Browse queue
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['jms_before_browse', 'jms_after_browse']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])      
        connection_factory = 'ConnectionFactory'
        properties = {'provider_url': 'tcp://127.0.0.1:61616',
                      'initial_context_factory': 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'}
        res = c.connect(connection_factory, properties)  
        queue = 'dynamicQueues/HydraQueue'
        res = c.browse(queue)       
                
      Validate: |
        this.test_result = str(res)
        assert (len(res) > 0), 'browse is not empty'
        msg = res[-1]
        cont = [msg['message'], msg['JMSCorrelationID'], msg['JMSType']]
        exp = ['test', '1234', 'test_msg']
        assert (cont == exp), 'message = {0}'.format(exp)
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'browse fires {0}'.format(evs)
        del mh._event_hooks[evs[0]] 
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]      
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_single_msg
      Desc: Browse single message
      
      Test: |
        res = c.browse(queue, 1)       
                
      Validate: |
        this.test_result = str(res)
        assert (len(res) == 1), 'browse contains 1 message'
        cont = res[0]['message']
        exp = 'test'
        assert (cont == exp), 'message = {0}'.format(exp)            
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_jmscorrelationid
      Desc: Search message with JMSCorrelationID
      
      Test: |
        jms_id = '1234'
        res = c.browse(queue, jms_correlation_id=jms_id)       
                
      Validate: |
        this.test_result = str(res)
        assert (len(res) >= 1), 'browse contains messages'
        cont = res[-1]['JMSCorrelationID']
        assert (cont == jms_id), 'JMSCorrelationID = {0}'.format(exp)  
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_jmstype
      Desc: Search message with JMSType
      
      Test: |
        jms_type = 'test_msg'
        res = c.browse(queue, jms_type=jms_type)       
                
      Validate: |
        this.test_result = str(res)
        assert (len(res) >= 1), 'browse contains messages'
        cont = res[-1]['JMSType']
        assert (cont == jms_type), 'JMSType = {0}'.format(exp)    
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_both
      Desc: Search message with JMSCorrelationID, JMSType
      
      Test: |
        res = c.browse(queue, jms_correlation_id=jms_id, jms_type=jms_type)       
                
      Validate: |
        this.test_result = str(res)
        assert (len(res) >= 1), 'browse contains messages'
        cont = [res[-1]['JMSCorrelationID'], res[-1]['JMSType']]
        exp = [jms_id, jms_type]
        assert (cont == exp), 'JMSCorrelationID, JMSType = {0}'.format(exp)      
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_no_msg
      Desc: Search no messages
      
      Test: |
        res = c.browse(queue, jms_correlation_id='1235', jms_type=jms_type)       
                
      Validate: |
        this.test_result = str(res)
        assert (len(res) == 0), 'browse is empty'
        c.disconnect() 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases      
        
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server 
      
      Test: |
        res = c.browse('test')             
        
      Validate: |
        this.test_result = res
        assert (res == None), 'browse = None'         
        
Test-Scenario-7:
  Id: ts_07
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_receive
  Desc: Test method receive
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
  
  Test-Case-1:
    Id: tc_01
    Name: tc_receive
    Desc: Receive message
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_single
      Desc: Receive single message
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['jms_before_receive', 'jms_after_receive']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])      
        connection_factory = 'ConnectionFactory'
        properties = {'provider_url': 'tcp://127.0.0.1:61616',
                      'initial_context_factory': 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'}
        c.connect(connection_factory, properties) 
        queue = 'dynamicQueues/HydraQueue'
        res = c.receive(queue, 1)       
                
      Validate: |
        this.test_result = str(res)
        assert (len(res) == 1), 'received 1 message'
        msg = res[0]
        cont = msg['message']
        exp = 'test'
        assert (cont == exp), 'message = {0}'.format(exp)
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'receive fires {0}'.format(evs)
        del mh._event_hooks[evs[0]] 
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]      
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_mult_msg
      Desc: Receive multiple messages
      
      Test: |
        cnt = 5
        msg = 'test'
        headers = {'JMSCorrelationID': '1234', 'JMSType': 'test_msg'}
        for i in range(0, cnt):
            c.send(queue, msg, 'queue', headers)
         
        c.disconnect()
        c.connect(connection_factory, properties)     
        res = c.receive(queue, 10)       
                
      Validate: |
        this.test_result = str(res[-1])
        assert (len(res) >= cnt), 'received {0} messages'.format(cnt)
        msg = res[-1]
        cont = [msg['message'], msg['JMSCorrelationID'], msg['JMSType']]
        exp = ['test', '1234', 'test_msg']
        assert (cont == exp), 'message = {0}'.format(exp) 
        res = c.browse(queue)
        assert (len(res) == 0), 'queue is empty after receive' 
        c.disconnect()                               
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases      
        
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server 
      
      Test: |
        res = c.receive(queue)             
        
      Validate: |
        this.test_result = str(res)
        assert (res == None), 'receive = None'                                    
        
Test-Scenario-8:
  Id: ts_08
  Path: hydratk/lib/network/jms/jms_client/01_methods_ut.jedi
  Name: ts_close
  Desc: Test method close
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Test-Case-1:
    Id: tc_01
    Name: tc_close
    Desc: Close JVM
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_close
      Desc: Close
      
      Test: |
        res = c.close()
      
      Validate: |     
        this.test_result = res
        assert (res), 'close = True'                 