Test-Scenario-1:
  Id: ts_01
  Path: hydratk/lib/network/rest/client/01_methods_ut.jedi
  Name: ts_init
  Desc: Test method __init__
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.rest.client import RESTClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize RESTClient
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_verbose
      Desc: Not verbose mode
      
      Test: |
        c = RESTClient(False)
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'RESTClient'), '__init__ = RESTClient'
        this.test_result = res = c._verbose
        assert (not res), '_verbose = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_verbose
      Desc: Verbose mode
      
      Test: |
        c = RESTClient(True)
        res = c._verbose
      
      Validate: |
        this.test_result = res
        assert (res), '_verbose = True'        
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/lib/network/rest/client/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.rest.client import RESTClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_res_status
      Desc: Getter res_status
      
      Test: |
        c = RESTClient(True)
        c.send_request('http://localhost:8080/Autobot/rs/crm/')
        res = c.res_status
      
      Validate: |        
        this.test_result = res
        exp = c._res_status
        assert (res == exp), 'res_status = {0}'.format(exp) 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_req_header
      Desc: Getter req_header
      
      Test: |
        res = c.req_header
      
      Validate: |        
        this.test_result = str(res)
        exp = c._req_header
        assert (res == exp), 'req_header = {0}'.format(exp)         
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_req_body
      Desc: Getter req_body
      
      Test: |
        res = c.req_body
      
      Validate: |        
        this.test_result = (res)
        exp = c._req_body
        assert (res == exp), 'req_body = {0}'.format(exp)         
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_res_header
      Desc: Getter res_header
      
      Test: |
        res = c.res_header
      
      Validate: |        
        this.test_result = str(res)
        exp = c._res_header
        assert (res == exp), 'res_header = {0}'.format(exp)         
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_res_body
      Desc: Getter res_body
      
      Test: |
        res = c.res_body
      
      Validate: |        
        this.test_result = (res)
        exp = c._res_body
        assert (res == exp), 'res_body = {0}'.format(exp)           
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_verbose
      Desc: Getter verbose
      
      Test: |
        res = c.verbose
      
      Validate: |        
        this.test_result = res
        exp = c._verbose
        assert (res == exp), 'verbose = {0}'.format(exp) 
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_config
      Desc: Getter config
      
      Test: |
        res = c.config
      
      Validate: |        
        this.test_result = str(res)
        exp = c._config
        assert (res == exp), 'config = {0}'.format(exp)   
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_history
      Desc: Getter history
      
      Test: |
        res = c.history
      
      Validate: |        
        this.test_result = str(res)
        exp = c._history
        assert (res == exp), 'history = {0}'.format(exp) 
        
    Test-Condition-9: 
      Id: tco_09
      Name: tco_url
      Desc: Getter url
      
      Test: |
        res = c.url
      
      Validate: |        
        this.test_result = res
        exp = c._url
        assert (res == exp), 'url = {0}'.format(exp)       
        
    Test-Condition-10: 
      Id: tco_10
      Name: tco_proxies
      Desc: Getter proxies
      
      Test: |
        res = c.proxies
      
      Validate: |        
        this.test_result = res
        exp = c._proxies
        assert (res == exp), 'proxies = {0}'.format(exp)        
        
    Test-Condition-11: 
      Id: tco_11
      Name: tco_cert
      Desc: Getter cert
      
      Test: |
        res = c.cert
      
      Validate: |        
        this.test_result = res
        exp = c._cert
        assert (res == exp), 'cert = {0}'.format(exp)  
        
    Test-Condition-12: 
      Id: tco_12
      Name: tco_cookies
      Desc: Getter cookies
      
      Test: |
        res = c.cookies
      
      Validate: |        
        this.test_result = str(res)
        exp = c._cookies
        assert (res == exp), 'cookies = {0}'.format(exp)                                        
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/lib/network/rest/client/01_methods_ut.jedi
  Name: ts_get_header
  Desc: Test method get_header
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.network.rest.client import RESTClient
  
  Test-Case-1:
    Id: tc_01
    Name: tc_get_header
    Desc: Get header
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_header
      Desc: Get header
      
      Test: |
        
        c = RESTClient()
        c.send_request('http://localhost:8080/Autobot/rs/crm/')
        res = c.get_header('content-type')
      
      Validate: |        
        this.test_result = res
        exp = 'text/html'
        assert (res == exp), 'get_header = {0}'.format(exp)        
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid
      Desc: Invalid header
      
      Test: |
        res = c.get_header('xx')
      
      Validate: |        
        this.test_result = res
        assert (res == None), 'get_header = None'   
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/lib/network/rest/client/01_methods_ut.jedi
  Name: ts_send_request
  Desc: Test method send_request
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from hydratk.lib.network.rest.client import RESTClient
    from yodahelpers.hydratk.core.events import events, reg_ev_hook
    from simplejson import dumps
    from os import path, system
  
  Test-Case-1:
    Id: tc_01
    Name: tc_json
    Desc: Send request with JSON
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_get
      Desc: GET method
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['rest_before_request', 'rest_after_request']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = RESTClient()
        url = 'http://localhost:8080/Autobot/rs/crm/customer'
        headers, params = {'Accept': 'application/json'}, {'id': 0} 
        res, out = c.send_request(url, method='GET', headers=headers, params=params)      
      
      Validate: |          
        this.test_result = res
        assert (res == 400), 'status = 400'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'send_request fires {0}'.format(evs)        
        del mh._event_hooks[evs[0]] 
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]       
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_post
      Desc: POST method
      
      Test: |
        name, status, segment = 'Charlie Bowman', 'active', 2
        body = {'name': name, 'status': status, 'segment': segment}
        content_type = 'json'
        res, out = c.send_request(url, method='POST', content_type=content_type, body=dumps(body))      
      
      Validate: |          
        this.test_result = res
        assert (res == 200), 'status = 200'
        id = int(out)
        params['id'] = id
        res, out = c.send_request(url, headers=headers, params=params)
        this.test_result = str(out)
        body['id'] = id
        assert (out == body), 'out = {0}'.format(body)        
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_put
      Desc: PUT method
      
      Test: |
        name, status, segment = 'Vince Neil', 'suspend', 3
        body = {'id': id, 'name': name, 'status': status, 'segment': segment}
        res, out = c.send_request(url, method='PUT', content_type=content_type, body=dumps(body))      
      
      Validate: |          
        this.test_result = res
        assert (res == 200), 'status = 200'
        this.test_result = out
        res, out = c.send_request(url, headers=headers, params=params)
        this.test_result = str(out)
        assert (out == body), 'out = {0}'.format(body)  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_xml
    Desc: Send request with XML
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_get
      Desc: GET method
      
      Test: |
        c = RESTClient()
        url = 'http://localhost:8080/Autobot/rs/crm/customer'
        headers, params = {'Accept': 'application/xml'}, {'id': 0} 
        res, out = c.send_request(url, method='GET', headers=headers, params=params)      
      
      Validate: |          
        this.test_result = str(res)
        assert (res == 400), 'status = 400'   
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_post
      Desc: POST method
      
      Test: |
        name, status, segment = 'Charlie Bowman', 'active', 2
        body = '<customer><name>{0}</name><status>{1}</status><segment>{2}</segment></customer>'.format(name, status, segment)
        content_type = 'xml'
        res, out = c.send_request(url, method='POST', content_type=content_type, body=body)      
      
      Validate: |          
        this.test_result = res
        assert (res == 200), 'status = 200'
        id = int(out)
        params['id'] = id
        res, out = c.send_request(url, headers=headers, params=params)
        this.test_result = str(out)
        res = [out.id, out.name, out.status, out.segment]
        exp = [id, name, status, segment]
        assert (res == exp), 'out = {0}'.format(exp)        
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_put
      Desc: PUT method
      
      Test: |
        name, status, segment = 'Vince Neil', 'suspend', 3
        body = '<customer><id>{0}</id><name>{1}</name><status>{2}</status><segment>{3}</segment></customer>'.format(id, name, status, segment)
        res, out = c.send_request(url, method='PUT', content_type=content_type, body=body)      
      
      Validate: |          
        this.test_result = res
        assert (res == 200), 'status = 200'
        this.test_result = out
        res, out = c.send_request(url, headers=headers, params=params)
        res = [out.id, out.name, out.status, out.segment]
        exp = [id, name, status, segment]
        assert (res == exp), 'out = {0}'.format(exp)     
        
  Test-Case-3:
    Id: tc_03
    Name: tc_send
    Desc: Send request
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_https
      Desc: Send request via HTTPS
      
      Test: |
        c = RESTClient()
        url = 'https://google.com'
        res, out = c.send_request(url)
      
      Validate: |     
        this.test_result = res
        assert (res == 200), 'status = 200'
        exp = 'Google'
        assert (exp in out), 'out contains {0}'.format(exp)  
    
    Test-Condition-2: 
      Id: tco_02
      Name: tco_get_params
      Desc: GET method with URL params
      
      Test: |
        url = 'http://metalopolis.net/art_downtown.asp'
        params = {'id': '7871'}
        res, out = c.send_request(url, method='GET', params=params) 
        
      Validate: |
        this.test_result = res
        assert (res == 200), 'status = 200'  
        exp = 'Andrzej Sapkowski'
        assert (exp in out), 'out contains {0}'.format(exp)  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_post_form
      Desc: POST method to submit form     
      
      Test: |
        url = 'http://metalopolis.net/fastsearch.asp'
        params={'verb': 'motorhead', 'submit': '>>>'}
        res, out = c.send_request(url, method='POST', params=params)
      
      Validate: |                                                  
        this.test_result = res
        assert (res == 200), 'status = 200'
        exp = 'MOTORHEAD'
        assert (exp in out), 'out contains {0}'.format(exp) 
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_auth_basic
      Desc: Basic authentication
      
      Test: |
        url = 'https://git-retail.hydratk.org/'
        res, out = c.send_request(url, user='xxx', passw='xxx', auth='Basic')
      
      Validate: |  
        this.test_result = res
        assert (res == 200), 'status = 200' 
        exp = 'hydratk-demo'
        assert (exp in out), 'out contains {0}'.format(exp)   
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_auth_digest
      Desc: Digest authentication
      
      Test: |
        url = 'https://trac.hydratk.org/hydratk/login'
        res, out = c.send_request(url, user='xxx', passw='xxx', auth='Digest')
      
      Validate: |  
        this.test_result = res
        assert (res == 200), 'status = 200' 
        exp = 'HydraTK'
        assert (exp in out), 'out contains {0}'.format(exp)                   
        
  Test-Case-4:
    Id: tc_04
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_host
      Desc: Invalid host
    
      Test: |
        c = RESTClient()
        res, out = c.send_request('http://1.1.1.1')
    
      Validate: |                            
        this.test_result = res
        assert (res == None), 'status = None'   
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_name
      Desc: Invalid domain name
    
      Test: |
        c = RESTClient()
        res, out = c.send_request('http://xxx')
    
      Validate: |                            
        this.test_result = res
        assert (res == None), 'status = None'         
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_port
      Desc: Invalid port
      
      Test: |
        res, out = c.send_request('http://google.cz:20')
      
      Validate: |  
        this.test_result = res
        assert (res == None), 'status = None'   
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        res, out = c.send_request('http://google.cz/xx')
      
      Validate: |  
        this.test_result = res
        assert (res == 404), 'status = 404' 
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_invalid_prot
      Desc: Invalid protocol
      
      Test: |
        res, out = c.send_request('https://metalopolis.net')
      
      Validate: |  
        this.test_result = res
        assert (res == None), 'status = None'          
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_invalid_param
      Desc: Invalid path
      
      Test: |
        
        url = 'http://localhost:8080/Autobot/rs/crm/customer'
        res, out = c.send_request(url, method='GET', headers={'Accept': 'application/json'}, params={'id2':2})
      
      Validate: |  
        this.test_result = res
        assert (res == 400), 'status = 400'   
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_invalid_json
      Desc: Invalid JSON body
      
      Test: |
        res, out = c.send_request(url, method='POST', body='xx', content_type='json')
      
      Validate: |  
        this.test_result = res
        assert (res == 400), 'status = 400'    
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_invalid_xml
      Desc: Invalid XML body
      
      Test: |
        res, out = c.send_request(url, method='POST', body='xx', content_type='xml')
      
      Validate: |  
        this.test_result = res
        assert (res == 400), 'status = 400'    
        
    Test-Condition-9: 
      Id: tco_09
      Name: tco_missing_auth
      Desc: Missing authentication
      
      Test: |
        url = 'https://git-retail.hydratk.org/'
        res, out = c.send_request(url)
      
      Validate: |  
        this.test_result = res
        assert (res == 401), 'status = 401'   
        
    Test-Condition-10: 
      Id: tco_10
      Name: tco_invalid_auth
      Desc: Invalid authentication
      
      Test: |
        res, out = c.send_request(url, user='xx', passw='xx')
      
      Validate: |  
        this.test_result = res
        assert (res == 401), 'status = 401'       
        
  Test-Case-5:
    Id: tc_05
    Name: tc_files
    Desc: Request with files       
        
    Test-Condition-1: 
      Id: tco_01
      Name: tco_upload
      Desc: Upload file
      
      Test: |
        file = 'test.txt'
        with open(file, 'w') as f:
            f.write('test')
      
        c = RESTClient()
        url = 'http://www.filedropper.com/'
        res, out = c.send_request(url, method='POST', file=file)      
      
      Validate: |          
        this.test_result = res
        assert (res == 200), 'status = 200'
        this.test_result = out
        assert (out != None), 'download url is not empty' 
        system('rm -f {0}'.format(file))
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_up_invalid_path
      Desc: Invalid path for upload
      
      Test: |
        file = '/xxx/test.txt'
        res, out = c.send_request(url, method='POST', file=file)      
      
      Validate: |          
        this.test_result = res
        assert (res == None), 'None'                  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_download
      Desc: Download file
      
      Test: |
        url = 'https://pypi.python.org/packages/82/a3/ef4eb2dc3fcaaa5346d51548fcc3c8f0f4e1769d8ad4052430cd8ef1a1af/hydratk-ext-datagen-0.1.0.tar.gz#md5=5695263be75afd60473374e17c0f5785'
        file = 'hydratk-ext-datagen-0.1.0.tar.gz'
        res, out = c.send_request(url, method='GET', file=file)      
      
      Validate: |          
        this.test_result = str(res)
        assert (res == 200), 'status = 200'
        this.test_result = res = path.exists(file)
        assert (res), 'file {0} downloaded'.format(file)
        system('rm -f {0}'.format(file))        
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_down_invalid_path
      Desc: Invalid path for download
      
      Test: |
        file = '/xxx/test.txt'
        res, out = c.send_request(url, method='GET', file=file)      
      
      Validate: |          
        this.test_result = res
        assert (res == None), 'None'                                                                                         